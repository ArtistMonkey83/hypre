/*BHEADER**********************************************************************
 * Copyright (c) 2006   The Regents of the University of California.
 * Produced at the Lawrence Livermore National Laboratory.
 * Written by the HYPRE team. UCRL-CODE-222953.
 * All rights reserved.
 *
 * This file is part of HYPRE (see http://www.llnl.gov/CASC/hypre/).
 * Please see the COPYRIGHT_and_LICENSE file for the copyright notice, 
 * disclaimer, contact information and the GNU Lesser General Public License.
 *
 * HYPRE is free software; you can redistribute it and/or modify it under the 
 * terms of the GNU General Public License (as published by the Free Software
 * Foundation) version 2.1 dated February 1999.
 *
 * HYPRE is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY or FITNESS 
 * FOR A PARTICULAR PURPOSE.  See the terms and conditions of the GNU General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Revision: 2.3 $
 ***********************************************************************EHEADER*/



#ifndef _Utils_h_
#define _Utils_h_

class Utils {
 public:
   static void appendToCharArrayList(char**& strings, int& numStrings,
                                     char** stringsToAdd, int numStringsToAdd);

   static int getParam(const char* flag, int numParams, char** strings, char* param);

   static int sortedIntListFind(int item,const int* list, int len, int* insert);

   static int intListFind(int item, const int* list, int len);

   static int sortedGlobalIDListFind(GlobalID item, const GlobalID* list,
                                     int len, int* insert);

   static int sortedIntListInsert(int item, int*& list, int& len,
                                  int& allocatedLength);

   static int sortedGlobalIDListInsert(GlobalID item, GlobalID*& list,int& len,
                                       int& allocatedLength);

   static void intListInsert(int item, int index, int*& list, int& len,
                             int& allocatedLength);

   static void doubleListInsert(double item, int index, double*& list,int& len,
                             int& allocatedLength);

   static void GlobalIDListInsert(GlobalID item, int index, GlobalID*& list,
                                  int& len, int& allocatedLength);

   static void doubleArrayListInsert(int index, feiArray<double>**& daList, int& len);

   static void intArrayListInsert(int index, feiArray<int>**& iaList, int& len);

   static void intTableInsertRow(int* newRow, int whichRow,
                                 int**& table, int& numRows);

   static void doubleTableInsertRow(double* newRow, int whichRow,
                                    double**& table, int& numRows);

   static void appendIntList(int newItem, int*& list, int& lenList);

   static bool inList(int* list, int lenList, int item);
};

#endif

