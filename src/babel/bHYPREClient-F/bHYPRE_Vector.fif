C       
C       File:          bHYPRE_Vector_Impl.f
C       Symbol:        bHYPRE.Vector-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 1.0.4
C       Description:   Client-side documentation text for bHYPRE.Vector
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.Vector" (version 1.0.0)
C       




C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_Vector__cast_f(ref, retval, exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out bHYPRE.Vector retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_Vector__cast2_f(self, name, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Clear[]
C       Set {\tt self} to 0.
C       

        subroutine bHYPRE_Vector_Clear_f(self, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Copy[]
C       Copy data from x into {\tt self}.
C       

        subroutine bHYPRE_Vector_Copy_f(self, x, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Clone[]
C       Create an {\tt x} compatible with {\tt self}.
C       The new vector's data is not specified.
C       
C       NOTE: When this method is used in an inherited class, the
C       cloned {\tt Vector} object can be cast to an object with the
C       inherited class type.
C       

        subroutine bHYPRE_Vector_Clone_f(self, x, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Scale[]
C       Scale {\tt self} by {\tt a}.
C       

        subroutine bHYPRE_Vector_Scale_f(self, a, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in double a
        double precision a
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Dot[]
C       Compute {\tt d}, the inner-product of {\tt self} and {\tt x}.
C       

        subroutine bHYPRE_Vector_Dot_f(self, x, d, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in bHYPRE.Vector x
        integer*8 x
C        out double d
        double precision d
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Axpy[]
C       Add {\tt a}{\tt x} to {\tt self}.
C       

        subroutine bHYPRE_Vector_Axpy_f(self, a, x, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in double a
        double precision a
C        in bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_Vector_addRef_f(self, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_Vector_deleteRef_f(self, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_Vector_isSame_f(self, iobj, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_Vector_isType_f(self, name, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_Vector_getClassInfo_f(self, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine bHYPRE_Vector__exec_f(self, methodName, inArgs, 
     &     outArgs, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine bHYPRE_Vector__getURL_f(self, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine bHYPRE_Vector__isRemote_f(self, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine bHYPRE_Vector__isLocal_f(self, retval, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_Vector__set_hooks_f(self, on, exception)
        implicit none
C        in bHYPRE.Vector self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
