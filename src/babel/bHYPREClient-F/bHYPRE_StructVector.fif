C       
C       File:          bHYPRE_StructVector_Impl.f
C       Symbol:        bHYPRE.StructVector-v1.0.0
C       Symbol Type:   class
C       Babel Version: 1.0.4
C       Description:   Client-side documentation text for bHYPRE.StructVector
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.StructVector" (version 1.0.0)
C       




C       
C       Method:  _create[]
C       Create an instance of class bHYPRE.StructVector
C       

        subroutine bHYPRE_StructVector__create_f(retval)
        implicit none
C        out bHYPRE.StructVector retval
        integer*8 retval
        end


C       
C       Method:  _wrapObj[]
C       Create an instance of class that wraps the passed in private_databHYPRE.StructVector
C       

        subroutine bHYPRE_StructVector__wrapObj_f(private_data, retval)
        implicit none
C        in opaque private_data
        integer*8 private_data
C        out bHYPRE.StructVector retval
        integer*8 retval
        end


C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_StructVector__cast_f(ref, retval, exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out bHYPRE.StructVector retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_StructVector__cast2_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Create[]
C        This function is the preferred way to create a Struct Vector. 
C       

        subroutine bHYPRE_StructVector_Create_f(mpi_comm, grid, retval, 
     &     exception)
        implicit none
C        in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C        in bHYPRE.StructGrid grid
        integer*8 grid
C        out bHYPRE.StructVector retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_StructVector_addRef_f(self, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_StructVector_deleteRef_f(self, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_StructVector_isSame_f(self, iobj, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_StructVector_isType_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_StructVector_getClassInfo_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetGrid[]
C        Set the grid on which vectors are defined. 
C       

        subroutine bHYPRE_StructVector_SetGrid_f(self, grid, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in bHYPRE.StructGrid grid
        integer*8 grid
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetNumGhost[]
C        Set the number of ghost zones, separately on the lower and upper sides
C       for each dimension.
C       "num_ghost" is an array of size "dim2", twice the number of dimensions. 
C       

        subroutine bHYPRE_StructVector_SetNumGhost_f(self, num_ghost, 
     &     dim2, retval, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in int dim2
        integer*4 dim2
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> num_ghost(dim2)
        integer*4 num_ghost(0:dim2-1)
        end


C       
C       Method:  SetValue[]
C        Set the value of a single vector coefficient, given by "grid_index".
C       "grid_index" is an array of size "dim", where dim is the number
C       of dimensions. 
C       

        subroutine bHYPRE_StructVector_SetValue_f(self, grid_index, dim,
     &     value, retval, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in int dim
        integer*4 dim
C        in double value
        double precision value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> grid_index(dim)
        integer*4 grid_index(0:dim-1)
        end


C       
C       Method:  SetBoxValues[]
C        Set the values of all vector coefficient for grid points in a box.
C       The box is defined by its lower and upper corners in the grid.
C       "ilower" and "iupper" are arrays of size "dim", where dim is the
C       number of dimensions.  The "values" array has size "nvalues", which
C       is the number of grid points in the box. 
C       

        subroutine bHYPRE_StructVector_SetBoxValues_f(self, ilower, 
     &     iupper, dim, values, nvalues, retval, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in int dim
        integer*4 dim
C        in int nvalues
        integer*4 nvalues
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C        in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C        in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Method:  SetCommunicator[]
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       

        subroutine bHYPRE_StructVector_SetCommunicator_f(self, mpi_comm,
     &     retval, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Destroy[]
C       The Destroy function doesn't necessarily destroy anything.
C       It is just another name for deleteRef.  Thus it decrements the
C       object's reference count.  The Babel memory management system will
C       destroy the object if the reference count goes to zero.
C       

        subroutine bHYPRE_StructVector_Destroy_f(self, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Initialize[]
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       

        subroutine bHYPRE_StructVector_Initialize_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Assemble[]
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       

        subroutine bHYPRE_StructVector_Assemble_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Clear[]
C       Set {\tt self} to 0.
C       

        subroutine bHYPRE_StructVector_Clear_f(self, retval, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Copy[]
C       Copy data from x into {\tt self}.
C       

        subroutine bHYPRE_StructVector_Copy_f(self, x, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Clone[]
C       Create an {\tt x} compatible with {\tt self}.
C       The new vector's data is not specified.
C       
C       NOTE: When this method is used in an inherited class, the
C       cloned {\tt Vector} object can be cast to an object with the
C       inherited class type.
C       

        subroutine bHYPRE_StructVector_Clone_f(self, x, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Scale[]
C       Scale {\tt self} by {\tt a}.
C       

        subroutine bHYPRE_StructVector_Scale_f(self, a, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in double a
        double precision a
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Dot[]
C       Compute {\tt d}, the inner-product of {\tt self} and {\tt x}.
C       

        subroutine bHYPRE_StructVector_Dot_f(self, x, d, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in bHYPRE.Vector x
        integer*8 x
C        out double d
        double precision d
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Axpy[]
C       Add {\tt a}{\tt x} to {\tt self}.
C       

        subroutine bHYPRE_StructVector_Axpy_f(self, a, x, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in double a
        double precision a
C        in bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine bHYPRE_StructVector__exec_f(self, methodName, inArgs,
     &     outArgs, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine bHYPRE_StructVector__getURL_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine bHYPRE_StructVector__isRemote_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine bHYPRE_StructVector__isLocal_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_StructVector__set_hooks_f(self, on, exception)
        implicit none
C        in bHYPRE.StructVector self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks_static[]
C       Static Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_StructVector__set_hooks_static_f(on, 
     &     exception)
        implicit none
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
