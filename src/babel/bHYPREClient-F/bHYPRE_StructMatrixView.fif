C       
C       File:          bHYPRE_StructMatrixView_Impl.f
C       Symbol:        bHYPRE.StructMatrixView-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 1.0.4
C       Description:   Client-side documentation text for bHYPRE.StructMatrixView
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.StructMatrixView" (version 1.0.0)
C       




C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_StructMatrixView__cast_f(ref, retval, 
     &     exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out bHYPRE.StructMatrixView retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_StructMatrixView__cast2_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetGrid[]
C        Set the grid on which vectors are defined.  This and the stencil
C       determine the matrix structure. 
C       

        subroutine bHYPRE_StructMatrixView_SetGrid_f(self, grid, retval,
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in bHYPRE.StructGrid grid
        integer*8 grid
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetStencil[]
C        Set the stencil. This and the grid determine the matrix structure. 
C       

        subroutine bHYPRE_StructMatrixView_SetStencil_f(self, stencil, 
     &     retval, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in bHYPRE.StructStencil stencil
        integer*8 stencil
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetValues[]
C        Set matrix values at grid point, given by "index".
C       You can supply values for one or more positions in the stencil.
C       "index" is an array of size "dim"; and "stencil_indices" and "values"
C       are arrays of size "num_stencil_indices".
C       

        subroutine bHYPRE_StructMatrixView_SetValues_f(self, index, dim,
     &     num_stencil_indices, stencil_indices, values, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in int dim
        integer*4 dim
C        in int num_stencil_indices
        integer*4 num_stencil_indices
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> index(dim)
        integer*4 index(0:dim-1)
C        in rarray<int> stencil_indices(num_stencil_indices)
        integer*4 stencil_indices(0:num_stencil_indices-1)
C        in rarray<double> values(num_stencil_indices)
        double precision values(0:num_stencil_indices-1)
        end


C       
C       Method:  SetBoxValues[]
C        Set matrix values throughout a box in the grid, specified by its lower
C       and upper corners.  You can supply these values for one or more positions
C       in the stencil.  Thus the total number of matrix values you supply,
C       "nvalues", is num_stencil_indices x box_size, where box_size is the
C       number of grid points in the box.  The values array should be organized
C       so all values for a given box point are together (i.e., the stencil
C       index is the most rapidly varying).
C       "ilower" and "iupper" are arrays of size "dim", "stencil_indices" is an
C       array of size "num_stencil_indices", and "values" is an array of size
C       "nvalues". 
C       

        subroutine bHYPRE_StructMatrixView_SetBoxValues_f(self, ilower, 
     &     iupper, dim, num_stencil_indices, stencil_indices, values, 
     &     nvalues, retval, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in int dim
        integer*4 dim
C        in int num_stencil_indices
        integer*4 num_stencil_indices
C        in int nvalues
        integer*4 nvalues
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C        in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C        in rarray<int> stencil_indices(num_stencil_indices)
        integer*4 stencil_indices(0:num_stencil_indices-1)
C        in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Method:  SetNumGhost[]
C        Set the number of ghost zones, separately on the lower and upper sides
C       for each dimension.
C       "num_ghost" is an array of size "dim2", twice the number of dimensions
C       

        subroutine bHYPRE_StructMatrixView_SetNumGhost_f(self, 
     &     num_ghost, dim2, retval, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in int dim2
        integer*4 dim2
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> num_ghost(dim2)
        integer*4 num_ghost(0:dim2-1)
        end


C       
C       Method:  SetSymmetric[]
C        Call SetSymmetric with symmetric=1 to turn on symmetric matrix storage if
C       available. 
C       

        subroutine bHYPRE_StructMatrixView_SetSymmetric_f(self, 
     &     symmetric, retval, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in int symmetric
        integer*4 symmetric
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetConstantEntries[]
C        State which stencil entries are constant over the grid.
C       Supported options are: (i) none (the default),
C       (ii) all (stencil_constant_points should include all stencil points)
C       (iii) all entries but the diagonal. 
C       

        subroutine bHYPRE_StructMatrixView_SetConstantEntries_f(self, 
     &     num_stencil_constant_points, stencil_constant_points, retval,
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in int num_stencil_constant_points
        integer*4 num_stencil_constant_points
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> stencil_constant_points(num_stencil_constant_points)
        integer*4 stencil_constant_points(
     &     0:num_stencil_constant_points-1)
        end


C       
C       Method:  SetConstantValues[]
C        Provide values for matrix coefficients which are constant throughout
C       the grid, one value for each stencil point.
C       "stencil_indices" and "values" is each an array of length
C       "num_stencil_indices" 
C       

        subroutine bHYPRE_StructMatrixView_SetConstantValues_f(self, 
     &     num_stencil_indices, stencil_indices, values, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in int num_stencil_indices
        integer*4 num_stencil_indices
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> stencil_indices(num_stencil_indices)
        integer*4 stencil_indices(0:num_stencil_indices-1)
C        in rarray<double> values(num_stencil_indices)
        double precision values(0:num_stencil_indices-1)
        end


C       
C       Method:  SetCommunicator[]
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       

        subroutine bHYPRE_StructMatrixView_SetCommunicator_f(self, 
     &     mpi_comm, retval, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Destroy[]
C       The Destroy function doesn't necessarily destroy anything.
C       It is just another name for deleteRef.  Thus it decrements the
C       object's reference count.  The Babel memory management system will
C       destroy the object if the reference count goes to zero.
C       

        subroutine bHYPRE_StructMatrixView_Destroy_f(self, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Initialize[]
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       

        subroutine bHYPRE_StructMatrixView_Initialize_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Assemble[]
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       

        subroutine bHYPRE_StructMatrixView_Assemble_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_StructMatrixView_addRef_f(self, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_StructMatrixView_deleteRef_f(self, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_StructMatrixView_isSame_f(self, iobj, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_StructMatrixView_isType_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_StructMatrixView_getClassInfo_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine bHYPRE_StructMatrixView__exec_f(self, methodName, 
     &     inArgs, outArgs, exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine bHYPRE_StructMatrixView__getURL_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine bHYPRE_StructMatrixView__isRemote_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine bHYPRE_StructMatrixView__isLocal_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_StructMatrixView__set_hooks_f(self, on, 
     &     exception)
        implicit none
C        in bHYPRE.StructMatrixView self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
