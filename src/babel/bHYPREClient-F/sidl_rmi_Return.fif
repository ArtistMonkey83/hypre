C       
C       File:          sidl_rmi_Return_Impl.f
C       Symbol:        sidl.rmi.Return-v0.9.15
C       Symbol Type:   interface
C       Babel Version: 1.0.0
C       Release:       $Name:  $
C       Revision:      @(#) $Id: sidl_rmi_Return.fif,v 1.2 2006/09/14 21:51:54 painter Exp $
C       Description:   Client-side documentation text for sidl.rmi.Return
C       
C       Copyright (c) 2000-2002, The Regents of the University of California.
C       Produced at the Lawrence Livermore National Laboratory.
C       Written by the Components Team <components@llnl.gov>
C       All rights reserved.
C       
C       This file is part of Babel. For more information, see
C       http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
C       for Our Notice and the LICENSE file for the GNU Lesser General Public
C       License.
C       
C       This program is free software; you can redistribute it and/or modify it
C       under the terms of the GNU Lesser General Public License (as published by
C       the Free Software Foundation) version 2.1 dated February 1999.
C       
C       This program is distributed in the hope that it will be useful, but
C       WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
C       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
C       conditions of the GNU Lesser General Public License for more details.
C       
C       You should have recieved a copy of the GNU Lesser General Public License
C       along with this program; if not, write to the Free Software Foundation,
C       Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "sidl.rmi.Return" (version 0.9.15)
C       
C        
C       This interface is implemented by the Server side serializer.
C       Serializes method arguments after the return from the method
C       call.
C       




C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine sidl_rmi_Return__cast_f(ref, retval, exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out sidl.rmi.Return retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine sidl_rmi_Return__cast2_f(self, name, retval,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine sidl_rmi_Return_addRef_f(self, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine sidl_rmi_Return_deleteRef_f(self, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine sidl_rmi_Return_isSame_f(self, iobj, retval,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine sidl_rmi_Return_isType_f(self, name, retval,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine sidl_rmi_Return_getClassInfo_f(self, retval,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packBool[]
C       

        subroutine sidl_rmi_Return_packBool_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in bool value
        logical value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packChar[]
C       

        subroutine sidl_rmi_Return_packChar_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in char value
        character value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packInt[]
C       

        subroutine sidl_rmi_Return_packInt_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in int value
        integer*4 value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packLong[]
C       

        subroutine sidl_rmi_Return_packLong_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in long value
        integer*8 value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packOpaque[]
C       

        subroutine sidl_rmi_Return_packOpaque_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in opaque value
        integer*8 value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packFloat[]
C       

        subroutine sidl_rmi_Return_packFloat_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in float value
        real value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packDouble[]
C       

        subroutine sidl_rmi_Return_packDouble_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in double value
        double precision value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packFcomplex[]
C       

        subroutine sidl_rmi_Return_packFcomplex_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in fcomplex value
        complex value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packDcomplex[]
C       

        subroutine sidl_rmi_Return_packDcomplex_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in dcomplex value
        double complex value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packString[]
C       

        subroutine sidl_rmi_Return_packString_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in string value
        character*(*) value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packSerializable[]
C       

        subroutine sidl_rmi_Return_packSerializable_f(self, key, value,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in sidl.io.Serializable value
        integer*8 value
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packBoolArray[]
C        
C       pack arrays of values.  It is possible to ensure an array is
C       in a certain order by passing in ordering and dimension
C       requirements.  ordering should represent a value in the
C       sidl_array_ordering enumeration in sidlArray.h If either
C       argument is 0, it means there is no restriction on that
C       aspect.  The boolean reuse_array flag is set to true if the
C       remote unserializer should try to reuse the array that is
C       passed into it or not.
C       

        subroutine sidl_rmi_Return_packBoolArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<bool> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packCharArray[]
C       

        subroutine sidl_rmi_Return_packCharArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<char> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packIntArray[]
C       

        subroutine sidl_rmi_Return_packIntArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<int> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packLongArray[]
C       

        subroutine sidl_rmi_Return_packLongArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<long> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packOpaqueArray[]
C       

        subroutine sidl_rmi_Return_packOpaqueArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<opaque> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packFloatArray[]
C       

        subroutine sidl_rmi_Return_packFloatArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<float> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packDoubleArray[]
C       

        subroutine sidl_rmi_Return_packDoubleArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<double> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packFcomplexArray[]
C       

        subroutine sidl_rmi_Return_packFcomplexArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<fcomplex> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packDcomplexArray[]
C       

        subroutine sidl_rmi_Return_packDcomplexArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<dcomplex> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packStringArray[]
C       

        subroutine sidl_rmi_Return_packStringArray_f(self, key, value,
     &     ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<string> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packGenericArray[]
C       

        subroutine sidl_rmi_Return_packGenericArray_f(self, key, value,
     &     reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<> value
        integer*8 value
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  packSerializableArray[]
C       

        subroutine sidl_rmi_Return_packSerializableArray_f(self, key,
     &     value, ordering, dimen, reuse_array, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string key
        character*(*) key
C        in array<sidl.io.Serializable> value
        integer*8 value
C        in int ordering
        integer*4 ordering
C        in int dimen
        integer*4 dimen
C        in bool reuse_array
        logical reuse_array
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  throwException[]
C        
C       This method serialized exceptions thrown on the server side
C       that should be returned to the client.  Assumed to invalidate
C       in previously serialized arguments.  (Also assumed that no
C       more arguments will be serialized.)
C       

        subroutine sidl_rmi_Return_throwException_f(self, ex_to_throw,
     &     exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in sidl.BaseException ex_to_throw
        integer*8 ex_to_throw
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine sidl_rmi_Return__exec_f(self, methodName, inArgs,
     &     outArgs, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine sidl_rmi_Return__getURL_f(self, retval, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine sidl_rmi_Return__isRemote_f(self, retval, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine sidl_rmi_Return__isLocal_f(self, retval, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine sidl_rmi_Return__set_hooks_f(self, on, exception)
        implicit none
C        in sidl.rmi.Return self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
