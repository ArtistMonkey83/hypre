C       
C       File:          bHYPRE_Operator_Impl.f
C       Symbol:        bHYPRE.Operator-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 1.0.4
C       Description:   Client-side documentation text for bHYPRE.Operator
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.Operator" (version 1.0.0)
C       
C       An Operator is anything that maps one Vector to another.  The
C       terms {\tt Setup} and {\tt Apply} are reserved for Operators.
C       The implementation is allowed to assume that supplied parameter
C       arrays will not be destroyed.
C       




C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_Operator__cast_f(ref, retval, exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out bHYPRE.Operator retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_Operator__cast2_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetCommunicator[]
C       Set the MPI Communicator.
C       DEPRECATED, use Create:
C       

        subroutine bHYPRE_Operator_SetCommunicator_f(self, mpi_comm, 
     &     retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Destroy[]
C       The Destroy function doesn't necessarily destroy anything.
C       It is just another name for deleteRef.  Thus it decrements the
C       object's reference count.  The Babel memory management system will
C       destroy the object if the reference count goes to zero.
C       

        subroutine bHYPRE_Operator_Destroy_f(self, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetIntParameter[]
C       Set the int parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetIntParameter_f(self, name, value, 
     &     retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in int value
        integer*4 value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetDoubleParameter[]
C       Set the double parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetDoubleParameter_f(self, name, 
     &     value, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in double value
        double precision value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetStringParameter[]
C       Set the string parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetStringParameter_f(self, name, 
     &     value, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in string value
        character*(*) value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetIntArray1Parameter[]
C       Set the int 1-D array parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetIntArray1Parameter_f(self, name, 
     &     value, nvalues, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in int nvalues
        integer*4 nvalues
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> value(nvalues)
        integer*4 value(0:nvalues-1)
        end


C       
C       Method:  SetIntArray2Parameter[]
C       Set the int 2-D array parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetIntArray2Parameter_f(self, name, 
     &     value, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in array<int,2,column-major> value
        integer*8 value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetDoubleArray1Parameter[]
C       Set the double 1-D array parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetDoubleArray1Parameter_f(self, 
     &     name, value, nvalues, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in int nvalues
        integer*4 nvalues
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<double> value(nvalues)
        double precision value(0:nvalues-1)
        end


C       
C       Method:  SetDoubleArray2Parameter[]
C       Set the double 2-D array parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_SetDoubleArray2Parameter_f(self, 
     &     name, value, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        in array<double,2,column-major> value
        integer*8 value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  GetIntValue[]
C       Set the int parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_GetIntValue_f(self, name, value, 
     &     retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        out int value
        integer*4 value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  GetDoubleValue[]
C       Get the double parameter associated with {\tt name}.
C       

        subroutine bHYPRE_Operator_GetDoubleValue_f(self, name, value, 
     &     retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        out double value
        double precision value
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Setup[]
C       (Optional) Do any preprocessing that may be necessary in
C       order to execute {\tt Apply}.
C       

        subroutine bHYPRE_Operator_Setup_f(self, b, x, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in bHYPRE.Vector b
        integer*8 b
C        in bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Apply[]
C       Apply the operator to {\tt b}, returning {\tt x}.
C       

        subroutine bHYPRE_Operator_Apply_f(self, b, x, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in bHYPRE.Vector b
        integer*8 b
C        inout bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  ApplyAdjoint[]
C       Apply the adjoint of the operator to {\tt b}, returning {\tt x}.
C       

        subroutine bHYPRE_Operator_ApplyAdjoint_f(self, b, x, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in bHYPRE.Vector b
        integer*8 b
C        inout bHYPRE.Vector x
        integer*8 x
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_Operator_addRef_f(self, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_Operator_deleteRef_f(self, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_Operator_isSame_f(self, iobj, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_Operator_isType_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_Operator_getClassInfo_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine bHYPRE_Operator__exec_f(self, methodName, inArgs, 
     &     outArgs, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine bHYPRE_Operator__getURL_f(self, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine bHYPRE_Operator__isRemote_f(self, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine bHYPRE_Operator__isLocal_f(self, retval, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_Operator__set_hooks_f(self, on, exception)
        implicit none
C        in bHYPRE.Operator self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
