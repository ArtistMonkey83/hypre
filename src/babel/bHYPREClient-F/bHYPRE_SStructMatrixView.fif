C       
C       File:          bHYPRE_SStructMatrixView_Impl.f
C       Symbol:        bHYPRE.SStructMatrixView-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 1.0.4
C       Description:   Client-side documentation text for bHYPRE.SStructMatrixView
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.SStructMatrixView" (version 1.0.0)
C       




C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_SStructMatrixView__cast_f(ref, retval, 
     &     exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out bHYPRE.SStructMatrixView retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_SStructMatrixView__cast2_f(self, name, retval,
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetGraph[]
C       Set the matrix graph.
C       DEPRECATED     Use Create
C       

        subroutine bHYPRE_SStructMatrixView_SetGraph_f(self, graph, 
     &     retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in bHYPRE.SStructGraph graph
        integer*8 graph
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetValues[]
C       Set matrix coefficients index by index.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of the same
C       type: either stencil or non-stencil, but not both.  Also, if
C       they are stencil entries, they must all represent couplings
C       to the same variable type (there are no such restrictions for
C       non-stencil entries).
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       

        subroutine bHYPRE_SStructMatrixView_SetValues_f(self, part, 
     &     index, dim, var, nentries, entries, values, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in int part
        integer*4 part
C        in int dim
        integer*4 dim
C        in int var
        integer*4 var
C        in int nentries
        integer*4 nentries
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> index(dim)
        integer*4 index(0:dim-1)
C        in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C        in rarray<double> values(nentries)
        double precision values(0:nentries-1)
        end


C       
C       Method:  SetBoxValues[]
C       Set matrix coefficients a box at a time.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of the same
C       type: either stencil or non-stencil, but not both.  Also, if
C       they are stencil entries, they must all represent couplings
C       to the same variable type (there are no such restrictions for
C       non-stencil entries).
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       

        subroutine bHYPRE_SStructMatrixView_SetBoxValues_f(self, part, 
     &     ilower, iupper, dim, var, nentries, entries, values, nvalues,
     &     retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in int part
        integer*4 part
C        in int dim
        integer*4 dim
C        in int var
        integer*4 var
C        in int nentries
        integer*4 nentries
C        in int nvalues
        integer*4 nvalues
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C        in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C        in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C        in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Method:  AddToValues[]
C       Add to matrix coefficients index by index.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of the same
C       type: either stencil or non-stencil, but not both.  Also, if
C       they are stencil entries, they must all represent couplings
C       to the same variable type.
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       

        subroutine bHYPRE_SStructMatrixView_AddToValues_f(self, part, 
     &     index, dim, var, nentries, entries, values, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in int part
        integer*4 part
C        in int dim
        integer*4 dim
C        in int var
        integer*4 var
C        in int nentries
        integer*4 nentries
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> index(dim)
        integer*4 index(0:dim-1)
C        in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C        in rarray<double> values(nentries)
        double precision values(0:nentries-1)
        end


C       
C       Method:  AddToBoxValues[]
C       Add to matrix coefficients a box at a time.
C       
C       NOTE: Users are required to set values on all processes that
C       own the associated variables.  This means that some data will
C       be multiply defined.
C       
C       NOTE: The entries in this routine must all be of stencil
C       type.  Also, they must all represent couplings to the same
C       variable type.
C       
C       If the matrix is complex, then {\tt values} consists of pairs
C       of doubles representing the real and imaginary parts of each
C       complex value.
C       

        subroutine bHYPRE_SStructMatrixView_AddToBoxValues_f(self, part,
     &     ilower, iupper, dim, var, nentries, entries, values, nvalues,
     &     retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in int part
        integer*4 part
C        in int dim
        integer*4 dim
C        in int var
        integer*4 var
C        in int nentries
        integer*4 nentries
C        in int nvalues
        integer*4 nvalues
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ilower(dim)
        integer*4 ilower(0:dim-1)
C        in rarray<int> iupper(dim)
        integer*4 iupper(0:dim-1)
C        in rarray<int> entries(nentries)
        integer*4 entries(0:nentries-1)
C        in rarray<double> values(nvalues)
        double precision values(0:nvalues-1)
        end


C       
C       Method:  SetSymmetric[]
C       Define symmetry properties for the stencil entries in the
C       matrix.  The boolean argument {\tt symmetric} is applied to
C       stencil entries on part {\tt part} that couple variable {\tt
C       var} to variable {\tt to\_var}.  A value of -1 may be used
C       for {\tt part}, {\tt var}, or {\tt to\_var} to specify
C       ``all''.  For example, if {\tt part} and {\tt to\_var} are
C       set to -1, then the boolean is applied to stencil entries on
C       all parts that couple variable {\tt var} to all other
C       variables.
C       
C       By default, matrices are assumed to be nonsymmetric.
C       Significant storage savings can be made if the matrix is
C       symmetric.
C       

        subroutine bHYPRE_SStructMatrixView_SetSymmetric_f(self, part, 
     &     var, to_var, symmetric, retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in int part
        integer*4 part
C        in int var
        integer*4 var
C        in int to_var
        integer*4 to_var
C        in int symmetric
        integer*4 symmetric
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetNSSymmetric[]
C       Define symmetry properties for all non-stencil matrix
C       entries.
C       

        subroutine bHYPRE_SStructMatrixView_SetNSSymmetric_f(self, 
     &     symmetric, retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in int symmetric
        integer*4 symmetric
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetComplex[]
C       Set the matrix to be complex.
C       

        subroutine bHYPRE_SStructMatrixView_SetComplex_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Print[]
C       Print the matrix to file.  This is mainly for debugging
C       purposes.
C       

        subroutine bHYPRE_SStructMatrixView_Print_f(self, filename, all,
     &     retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in string filename
        character*(*) filename
C        in int all
        integer*4 all
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  GetObject[]
C       A semi-structured matrix or vector contains a Struct or IJ matrix
C       or vector.  GetObject returns it.
C       The returned type is a sidl.BaseInterface.
C       A cast must be used on the returned object to convert it into a known type.
C       

        subroutine bHYPRE_SStructMatrixView_GetObject_f(self, A, retval,
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out sidl.BaseInterface A
        integer*8 A
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetCommunicator[]
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       

        subroutine bHYPRE_SStructMatrixView_SetCommunicator_f(self, 
     &     mpi_comm, retval, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Destroy[]
C       The Destroy function doesn't necessarily destroy anything.
C       It is just another name for deleteRef.  Thus it decrements the
C       object's reference count.  The Babel memory management system will
C       destroy the object if the reference count goes to zero.
C       

        subroutine bHYPRE_SStructMatrixView_Destroy_f(self, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Initialize[]
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       

        subroutine bHYPRE_SStructMatrixView_Initialize_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Assemble[]
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       

        subroutine bHYPRE_SStructMatrixView_Assemble_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_SStructMatrixView_addRef_f(self, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_SStructMatrixView_deleteRef_f(self, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_SStructMatrixView_isSame_f(self, iobj, retval,
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_SStructMatrixView_isType_f(self, name, retval,
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_SStructMatrixView_getClassInfo_f(self, retval,
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine bHYPRE_SStructMatrixView__exec_f(self, methodName, 
     &     inArgs, outArgs, exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine bHYPRE_SStructMatrixView__getURL_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine bHYPRE_SStructMatrixView__isRemote_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine bHYPRE_SStructMatrixView__isLocal_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_SStructMatrixView__set_hooks_f(self, on, 
     &     exception)
        implicit none
C        in bHYPRE.SStructMatrixView self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
