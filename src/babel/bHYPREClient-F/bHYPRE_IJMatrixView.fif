C       
C       File:          bHYPRE_IJMatrixView_Impl.f
C       Symbol:        bHYPRE.IJMatrixView-v1.0.0
C       Symbol Type:   interface
C       Babel Version: 1.0.4
C       Description:   Client-side documentation text for bHYPRE.IJMatrixView
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "bHYPRE.IJMatrixView" (version 1.0.0)
C       
C       This interface represents a linear-algebraic conceptual view of a
C       linear system.  The 'I' and 'J' in the name are meant to be
C       mnemonic for the traditional matrix notation A(I,J).
C       




C       
C       Method:  _cast[]
C       Cast method for interface and type conversions.
C       

        subroutine bHYPRE_IJMatrixView__cast_f(ref, retval, exception)
        implicit none
C        in opaque ref
        integer*8 ref
C        out bHYPRE.IJMatrixView retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _cast2[]
C       Cast method for interface and class type conversions.
C       

        subroutine bHYPRE_IJMatrixView__cast2_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in string name
        character*(*) name
C        out opaque retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetLocalRange[]
C       Set the local range for a matrix object.  Each process owns
C       some unique consecutive range of rows, indicated by the
C       global row indices {\tt ilower} and {\tt iupper}.  The row
C       data is required to be such that the value of {\tt ilower} on
C       any process $p$ be exactly one more than the value of {\tt
C       iupper} on process $p-1$.  Note that the first row of the
C       global matrix may start with any integer value.  In
C       particular, one may use zero- or one-based indexing.
C       
C       For square matrices, {\tt jlower} and {\tt jupper} typically
C       should match {\tt ilower} and {\tt iupper}, respectively.
C       For rectangular matrices, {\tt jlower} and {\tt jupper}
C       should define a partitioning of the columns.  This
C       partitioning must be used for any vector $v$ that will be
C       used in matrix-vector products with the rectangular matrix.
C       The matrix data structure may use {\tt jlower} and {\tt
C       jupper} to store the diagonal blocks (rectangular in general)
C       of the matrix separately from the rest of the matrix.
C       
C       Collective.
C       

        subroutine bHYPRE_IJMatrixView_SetLocalRange_f(self, ilower, 
     &     iupper, jlower, jupper, retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in int ilower
        integer*4 ilower
C        in int iupper
        integer*4 iupper
C        in int jlower
        integer*4 jlower
C        in int jupper
        integer*4 jupper
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetValues[]
C       Sets values for {\tt nrows} of the matrix.  The arrays {\tt
C       ncols} and {\tt rows} are of dimension {\tt nrows} and
C       contain the number of columns in each row and the row
C       indices, respectively.  The array {\tt cols} contains the
C       column indices for each of the {\tt rows}, and is ordered by
C       rows.  The data in the {\tt values} array corresponds
C       directly to the column entries in {\tt cols}.  The last argument
C       is the size of the cols and values arrays, i.e. the total number
C       of nonzeros being provided, i.e. the sum of all values in ncols.
C       This functin erases any previous values at the specified locations and
C       replaces them with new ones, or, if there was no value there before,
C       inserts a new one.
C       
C       Not collective.
C       

        subroutine bHYPRE_IJMatrixView_SetValues_f(self, nrows, ncols, 
     &     rows, cols, values, nnonzeros, retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in int nrows
        integer*4 nrows
C        in int nnonzeros
        integer*4 nnonzeros
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ncols(nrows)
        integer*4 ncols(0:nrows-1)
C        in rarray<int> rows(nrows)
        integer*4 rows(0:nrows-1)
C        in rarray<int> cols(nnonzeros)
        integer*4 cols(0:nnonzeros-1)
C        in rarray<double> values(nnonzeros)
        double precision values(0:nnonzeros-1)
        end


C       
C       Method:  AddToValues[]
C       Adds to values for {\tt nrows} of the matrix.  Usage details
C       are analogous to {\tt SetValues}.  Adds to any previous
C       values at the specified locations, or, if there was no value
C       there before, inserts a new one.
C       
C       Not collective.
C       

        subroutine bHYPRE_IJMatrixView_AddToValues_f(self, nrows, ncols,
     &     rows, cols, values, nnonzeros, retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in int nrows
        integer*4 nrows
C        in int nnonzeros
        integer*4 nnonzeros
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ncols(nrows)
        integer*4 ncols(0:nrows-1)
C        in rarray<int> rows(nrows)
        integer*4 rows(0:nrows-1)
C        in rarray<int> cols(nnonzeros)
        integer*4 cols(0:nnonzeros-1)
C        in rarray<double> values(nnonzeros)
        double precision values(0:nnonzeros-1)
        end


C       
C       Method:  GetLocalRange[]
C       Gets range of rows owned by this processor and range of
C       column partitioning for this processor.
C       

        subroutine bHYPRE_IJMatrixView_GetLocalRange_f(self, ilower, 
     &     iupper, jlower, jupper, retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out int ilower
        integer*4 ilower
C        out int iupper
        integer*4 iupper
C        out int jlower
        integer*4 jlower
C        out int jupper
        integer*4 jupper
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  GetRowCounts[]
C       Gets number of nonzeros elements for {\tt nrows} rows
C       specified in {\tt rows} and returns them in {\tt ncols},
C       which needs to be allocated by the user.
C       

        subroutine bHYPRE_IJMatrixView_GetRowCounts_f(self, nrows, rows,
     &     ncols, retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in int nrows
        integer*4 nrows
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> rows(nrows)
        integer*4 rows(0:nrows-1)
C        inout rarray<int> ncols(nrows)
        integer*4 ncols(0:nrows-1)
        end


C       
C       Method:  GetValues[]
C       Gets values for {\tt nrows} rows or partial rows of the
C       matrix.  Usage details are analogous to {\tt SetValues}.
C       

        subroutine bHYPRE_IJMatrixView_GetValues_f(self, nrows, ncols, 
     &     rows, cols, values, nnonzeros, retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in int nrows
        integer*4 nrows
C        in int nnonzeros
        integer*4 nnonzeros
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> ncols(nrows)
        integer*4 ncols(0:nrows-1)
C        in rarray<int> rows(nrows)
        integer*4 rows(0:nrows-1)
C        in rarray<int> cols(nnonzeros)
        integer*4 cols(0:nnonzeros-1)
C        inout rarray<double> values(nnonzeros)
        double precision values(0:nnonzeros-1)
        end


C       
C       Method:  SetRowSizes[]
C       (Optional) Set the max number of nonzeros to expect in each
C       row.  The array {\tt sizes} contains estimated sizes for each
C       row on this process.  The integer nrows is the number of rows in
C       the local matrix.  This call can significantly improve the
C       efficiency of matrix construction, and should always be
C       utilized if possible.
C       
C       Not collective.
C       

        subroutine bHYPRE_IJMatrixView_SetRowSizes_f(self, sizes, nrows,
     &     retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in int nrows
        integer*4 nrows
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
C        in rarray<int> sizes(nrows)
        integer*4 sizes(0:nrows-1)
        end


C       
C       Method:  Print[]
C       Print the matrix to file.  This is mainly for debugging
C       purposes.
C       

        subroutine bHYPRE_IJMatrixView_Print_f(self, filename, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in string filename
        character*(*) filename
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Read[]
C       Read the matrix from file.  This is mainly for debugging
C       purposes.
C       

        subroutine bHYPRE_IJMatrixView_Read_f(self, filename, comm, 
     &     retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in string filename
        character*(*) filename
C        in bHYPRE.MPICommunicator comm
        integer*8 comm
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  SetCommunicator[]
C       Set the MPI Communicator.  DEPRECATED, Use Create()
C       

        subroutine bHYPRE_IJMatrixView_SetCommunicator_f(self, mpi_comm,
     &     retval, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in bHYPRE.MPICommunicator mpi_comm
        integer*8 mpi_comm
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Destroy[]
C       The Destroy function doesn't necessarily destroy anything.
C       It is just another name for deleteRef.  Thus it decrements the
C       object's reference count.  The Babel memory management system will
C       destroy the object if the reference count goes to zero.
C       

        subroutine bHYPRE_IJMatrixView_Destroy_f(self, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Initialize[]
C       Prepare an object for setting coefficient values, whether for
C       the first time or subsequently.
C       

        subroutine bHYPRE_IJMatrixView_Initialize_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  Assemble[]
C       Finalize the construction of an object before using, either
C       for the first time or on subsequent uses. {\tt Initialize}
C       and {\tt Assemble} always appear in a matched set, with
C       Initialize preceding Assemble. Values can only be set in
C       between a call to Initialize and Assemble.
C       

        subroutine bHYPRE_IJMatrixView_Assemble_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out int retval
        integer*4 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  addRef[]
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>sidl</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine bHYPRE_IJMatrixView_addRef_f(self, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  deleteRef[]
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>sidl</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine bHYPRE_IJMatrixView_deleteRef_f(self, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isSame[]
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine bHYPRE_IJMatrixView_isSame_f(self, iobj, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in sidl.BaseInterface iobj
        integer*8 iobj
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  isType[]
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>sidl</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine bHYPRE_IJMatrixView_isType_f(self, name, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in string name
        character*(*) name
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  getClassInfo[]
C       Return the meta-data about the class implementing this interface.
C       

        subroutine bHYPRE_IJMatrixView_getClassInfo_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out sidl.ClassInfo retval
        integer*8 retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _exec[]
C       Select and execute a method by name
C       

        subroutine bHYPRE_IJMatrixView__exec_f(self, methodName, inArgs,
     &     outArgs, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in string methodName
        character*(*) methodName
C        in sidl.rmi.Call inArgs
        integer*8 inArgs
C        in sidl.rmi.Return outArgs
        integer*8 outArgs
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _getURL[]
C       Get the URL of the Implementation of this object (for RMI)
C       

        subroutine bHYPRE_IJMatrixView__getURL_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out string retval
        character*(*) retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isRemote[]
C       TRUE if this object is remote, false if local
C       

        subroutine bHYPRE_IJMatrixView__isRemote_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _isLocal[]
C       TRUE if this object is local, false if remote
C       

        subroutine bHYPRE_IJMatrixView__isLocal_f(self, retval, 
     &     exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        out bool retval
        logical retval
C        out sidl.BaseInterface exception
        integer*8 exception
        end


C       
C       Method:  _set_hooks[]
C       Method to set whether or not method hooks should be invoked.
C       

        subroutine bHYPRE_IJMatrixView__set_hooks_f(self, on, exception)
        implicit none
C        in bHYPRE.IJMatrixView self
        integer*8 self
C        in bool on
        logical on
C        out sidl.BaseInterface exception
        integer*8 exception
        end
