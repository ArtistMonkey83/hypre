C       
C       File:          SIDL_BaseException_Impl.f
C       Symbol:        SIDL.BaseException-v0.8.2
C       Symbol Type:   class
C       Babel Version: 0.8.2
C       SIDL Created:  20030326 16:09:17 PST
C       Generated:     20030401 14:48:18 PST
C       Release:       $Name: V1-9-0b $
C       Revision:      @(#) $Id: SIDL_BaseException.fif,v 1.3 2003/04/01 23:57:11 painter Exp $
C       Description:   Client-side documentation text for SIDL.BaseException
C       
C       Copyright (c) 2000-2002, The Regents of the University of California.
C       Produced at the Lawrence Livermore National Laboratory.
C       Written by the Components Team <components@llnl.gov>
C       All rights reserved.
C       
C       This file is part of Babel. For more information, see
C       http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
C       for Our Notice and the LICENSE file for the GNU Lesser General Public
C       License.
C       
C       This program is free software; you can redistribute it and/or modify it
C       under the terms of the GNU Lesser General Public License (as published by
C       the Free Software Foundation) version 2.1 dated February 1999.
C       
C       This program is distributed in the hope that it will be useful, but
C       WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
C       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
C       conditions of the GNU Lesser General Public License for more details.
C       
C       You should have recieved a copy of the GNU Lesser General Public License
C       along with this program; if not, write to the Free Software Foundation,
C       Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
C       
C       WARNING: Automatically generated; changes will be lost
C       
C       babel-version = 0.8.2
C       source-line   = 171
C       source-url    = file:/home/epperly/current/release_082/linux_gcc2/share/../../babel-0.8.2/runtime/sidl/sidl.sidl
C       

        THIS FILE IS DOCUMENTATION - DO NOT COMPILE IT!

C       
C       Symbol "SIDL.BaseException" (version 0.8.2)
C       
C       Every exception inherits from <code>BaseException</code>.  This class
C       provides basic functionality to get and set error messages and stack
C       traces.
C       




C       
C       Create an instance of class SIDL.BaseException
C       

        subroutine SIDL_BaseException__create_f(retval)
        implicit none
C       out SIDL.BaseException retval
        integer*8 retval
        end


C       
C       Cast method for interface and type conversions.
C       

        subroutine SIDL_BaseException__cast_f(ref, retval)
        implicit none
C       in opaque ref
        integer*8 ref
C       out SIDL.BaseException retval
        integer*8 retval
        end


C       
C       Cast method for interface and class type conversions.
C       

        subroutine SIDL_BaseException__cast2_f(self, name, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in string name
        character*(*) name
C       out opaque retval
        integer*8 retval
        end


C       
C       <p>
C       Add one to the intrinsic reference count in the underlying object.
C       Object in <code>SIDL</code> have an intrinsic reference count.
C       Objects continue to exist as long as the reference count is
C       positive. Clients should call this method whenever they
C       create another ongoing reference to an object or interface.
C       </p>
C       <p>
C       This does not have a return value because there is no language
C       independent type that can refer to an interface or a
C       class.
C       </p>
C       

        subroutine SIDL_BaseException_addRef_f(self)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
        end


C       
C       Decrease by one the intrinsic reference count in the underlying
C       object, and delete the object if the reference is non-positive.
C       Objects in <code>SIDL</code> have an intrinsic reference count.
C       Clients should call this method whenever they remove a
C       reference to an object or interface.
C       

        subroutine SIDL_BaseException_deleteRef_f(self)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
        end


C       
C       Return true if and only if <code>obj</code> refers to the same
C       object as this object.
C       

        subroutine SIDL_BaseException_isSame_f(self, iobj, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in SIDL.BaseInterface iobj
        integer*8 iobj
C       out bool retval
        logical retval
        end


C       
C       Check whether the object can support the specified interface or
C       class.  If the <code>SIDL</code> type name in <code>name</code>
C       is supported, then a reference to that object is returned with the
C       reference count incremented.  The callee will be responsible for
C       calling <code>deleteRef</code> on the returned object.  If
C       the specified type is not supported, then a null reference is
C       returned.
C       

        subroutine SIDL_BaseException_queryInt_f(self, name, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in string name
        character*(*) name
C       out SIDL.BaseInterface retval
        integer*8 retval
        end


C       
C       Return whether this object is an instance of the specified type.
C       The string name must be the <code>SIDL</code> type name.  This
C       routine will return <code>true</code> if and only if a cast to
C       the string type name would succeed.
C       

        subroutine SIDL_BaseException_isType_f(self, name, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in string name
        character*(*) name
C       out bool retval
        logical retval
        end


C       
C       Return the meta-data about the class implementing this interface.
C       

        subroutine SIDL_BaseException_getClassInfo_f(self, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       out SIDL.ClassInfo retval
        integer*8 retval
        end


C       
C       Return the message associated with the exception.
C       

        subroutine SIDL_BaseException_getNote_f(self, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       out string retval
        character*(*) retval
        end


C       
C       Set the message associated with the exception.
C       

        subroutine SIDL_BaseException_setNote_f(self, message)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in string message
        character*(*) message
        end


C       
C       Returns formatted string containing the concatenation of all 
C       tracelines.
C       

        subroutine SIDL_BaseException_getTrace_f(self, retval)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       out string retval
        character*(*) retval
        end


C       
C       Adds a stringified entry/line to the stack trace.
C       

        subroutine SIDL_BaseException_addLine_f(self, traceline)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in string traceline
        character*(*) traceline
        end


C       
C       Formats and adds an entry to the stack trace based on the 
C       file name, line number, and method name.
C       

        subroutine SIDL_BaseException_add_f(self, filename, lineno,
     &     methodname)
        implicit none
C       in SIDL.BaseException self
        integer*8 self
C       in string filename
        character*(*) filename
C       in int lineno
        integer*4 lineno
C       in string methodname
        character*(*) methodname
        end
