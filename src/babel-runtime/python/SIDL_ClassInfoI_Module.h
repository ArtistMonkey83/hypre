/*
 * File:          SIDL_ClassInfoI_Module.h
 * Symbol:        SIDL.ClassInfoI-v0.8.1
 * Symbol Type:   class
 * Babel Version: 0.8.0
 * Release:       $Name: V1-9-0b $
 * Revision:      @(#) $Id: SIDL_ClassInfoI_Module.h,v 1.1 2003/02/12 23:26:05 painter Exp $
 * Description:   expose a constructor for the Python wrapper
 * 
 * Copyright (c) 2000-2002, The Regents of the University of California.
 * Produced at the Lawrence Livermore National Laboratory.
 * Written by the Components Team <components@llnl.gov>
 * All rights reserved.
 * 
 * This file is part of Babel. For more information, see
 * http://www.llnl.gov/CASC/components/. Please read the COPYRIGHT file
 * for Our Notice and the LICENSE file for the GNU Lesser General Public
 * License.
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License (as published by
 * the Free Software Foundation) version 2.1 dated February 1999.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the terms and
 * conditions of the GNU Lesser General Public License for more details.
 * 
 * You should have recieved a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 * WARNING: Automatically generated; only changes within splicers preserved
 * 
 * babel-version = 0.8.0
 */

/*
 * THIS CODE IS AUTOMATICALLY GENERATED BY THE BABEL
 * COMPILER. DO NOT EDIT THIS!
 * 
 * External clients need an entry point to wrap a pointer
 * to an instance of SIDL.ClassInfoI.
 * This header files defines two methods that such clients
 * will need.
 *     SIDL_ClassInfoI__import
 *         This should be called in the client's init
 *         module method.
 *     SIDL_ClassInfoI__wrap
 *         This will wrap an IOR in a Python object.
 */

#ifndef included_SIDL_ClassInfoI_MODULE
#define included_SIDL_ClassInfoI_MODULE

#include "babel_config.h"
#include <Python.h>

#ifdef __cplusplus
extern "C" {
#endif


/* Forward declaration of IOR structure */
struct SIDL_ClassInfoI__object;
struct SIDL_ClassInfoI__array;

#define SIDL_ClassInfoI__wrap_NUM 0
#define SIDL_ClassInfoI__wrap_RETURN PyObject *
#define SIDL_ClassInfoI__wrap_PROTO (struct SIDL_ClassInfoI__object *sidlobj)

#define SIDL_ClassInfoI__convert_NUM 1
#define SIDL_ClassInfoI__convert_RETURN int
#define SIDL_ClassInfoI__convert_PROTO (PyObject *obj, struct SIDL_ClassInfoI__object **sidlobj)

#define SIDL_ClassInfoI__convert_python_array_NUM 2
#define SIDL_ClassInfoI__convert_python_array_RETURN int
#define SIDL_ClassInfoI__convert_python_array_PROTO (PyObject *obj, struct SIDL_ClassInfoI__array **sidlarray)

#define SIDL_ClassInfoI__convert_sidl_array_NUM 3
#define SIDL_ClassInfoI__convert_sidl_array_RETURN PyObject *
#define SIDL_ClassInfoI__convert_sidl_array_PROTO (struct SIDL_ClassInfoI__array *sidlarray)

#define SIDL_ClassInfoI__destroy_sidl_array_NUM 4
#define SIDL_ClassInfoI__destroy_sidl_array_RETURN void
#define SIDL_ClassInfoI__destroy_sidl_array_PROTO (struct SIDL_ClassInfoI__array *sidlarray)

#define SIDL_ClassInfoI__weakRef_NUM 5
#define SIDL_ClassInfoI__weakRef_RETURN PyObject *
#define SIDL_ClassInfoI__weakRef_PROTO (struct SIDL_ClassInfoI__object *sidlobj)

#define SIDL_ClassInfoI_deref_NUM 6
#define SIDL_ClassInfoI_deref_RETURN void
#define SIDL_ClassInfoI_deref_PROTO (struct SIDL_ClassInfoI__object *sidlobj)

#define SIDL_ClassInfoI__newRef_NUM 7
#define SIDL_ClassInfoI__newRef_RETURN PyObject *
#define SIDL_ClassInfoI__newRef_PROTO (struct SIDL_ClassInfoI__object *sidlobj)

#define SIDL_ClassInfoI__addRef_NUM 8
#define SIDL_ClassInfoI__addRef_RETURN void
#define SIDL_ClassInfoI__addRef_PROTO (struct SIDL_ClassInfoI__object *sidlobj)

#define SIDL_ClassInfoI__API_NUM 9

#ifdef SIDL_ClassInfoI_INTERNAL

/*
 * This declaration is not for clients.
 */

static SIDL_ClassInfoI__wrap_RETURN
SIDL_ClassInfoI__wrap
SIDL_ClassInfoI__wrap_PROTO;

static SIDL_ClassInfoI__convert_RETURN
SIDL_ClassInfoI__convert
SIDL_ClassInfoI__convert_PROTO;

static SIDL_ClassInfoI__convert_python_array_RETURN
SIDL_ClassInfoI__convert_python_array
SIDL_ClassInfoI__convert_python_array_PROTO;

static SIDL_ClassInfoI__convert_sidl_array_RETURN
SIDL_ClassInfoI__convert_sidl_array
SIDL_ClassInfoI__convert_sidl_array_PROTO;

static SIDL_ClassInfoI__destroy_sidl_array_RETURN
SIDL_ClassInfoI__destroy_sidl_array
SIDL_ClassInfoI__destroy_sidl_array_PROTO;

static SIDL_ClassInfoI__weakRef_RETURN
SIDL_ClassInfoI__weakRef
SIDL_ClassInfoI__weakRef_PROTO;

static SIDL_ClassInfoI_deref_RETURN
SIDL_ClassInfoI_deref
SIDL_ClassInfoI_deref_PROTO;

static SIDL_ClassInfoI__newRef_RETURN
SIDL_ClassInfoI__newRef
SIDL_ClassInfoI__newRef_PROTO;

static SIDL_ClassInfoI__addRef_RETURN
SIDL_ClassInfoI__addRef
SIDL_ClassInfoI__addRef_PROTO;

#else

static void **SIDL_ClassInfoI__API;

#define SIDL_ClassInfoI__wrap \
  (*((SIDL_ClassInfoI__wrap_RETURN (*) \
  SIDL_ClassInfoI__wrap_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__wrap_NUM])))

#define SIDL_ClassInfoI__convert \
  (*((SIDL_ClassInfoI__convert_RETURN (*) \
  SIDL_ClassInfoI__convert_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__convert_NUM])))

#define SIDL_ClassInfoI__convert_python_array \
  (*((SIDL_ClassInfoI__convert_python_array_RETURN (*) \
  SIDL_ClassInfoI__convert_python_array_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__convert_python_array_NUM])))

#define SIDL_ClassInfoI__convert_sidl_array \
  (*((SIDL_ClassInfoI__convert_sidl_array_RETURN (*) \
  SIDL_ClassInfoI__convert_sidl_array_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__convert_sidl_array_NUM])))

#define SIDL_ClassInfoI__destroy_sidl_array \
  (*((SIDL_ClassInfoI__destroy_sidl_array_RETURN (*) \
  SIDL_ClassInfoI__destroy_sidl_array_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__destroy_sidl_array_NUM])))

#define SIDL_ClassInfoI__weakRef \
  (*((SIDL_ClassInfoI__weakRef_RETURN (*) \
  SIDL_ClassInfoI__weakRef_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__weakRef_NUM])))

#define SIDL_ClassInfoI_deref \
  (*((SIDL_ClassInfoI_deref_RETURN (*) \
  SIDL_ClassInfoI_deref_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI_deref_NUM])))

#define SIDL_ClassInfoI__newRef \
  (*((SIDL_ClassInfoI__newRef_RETURN (*) \
  SIDL_ClassInfoI__newRef_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__newRef_NUM])))

#define SIDL_ClassInfoI__addRef \
  (*((SIDL_ClassInfoI__addRef_RETURN (*) \
  SIDL_ClassInfoI__addRef_PROTO) \
  (SIDL_ClassInfoI__API \
  [SIDL_ClassInfoI__addRef_NUM])))

#define SIDL_ClassInfoI__import() \
{ \
  PyObject *module = PyImport_ImportModule("SIDL.ClassInfoI"); \
  if (module != NULL) { \
    PyObject *module_dict = PyModule_GetDict(module); \
    PyObject *c_api_object = \
      PyDict_GetItemString(module_dict, "_C_API"); \
    if (PyCObject_Check(c_api_object)) { \
      SIDL_ClassInfoI__API = \
        (void **)PyCObject_AsVoidPtr(c_api_object); \
    } \
    Py_DECREF(module); \
  } \
}

#endif

#ifdef __cplusplus
}
#endif

#endif
